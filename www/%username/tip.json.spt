"""Get or change the authenticated user's tip to this person.
"""
from decimal import InvalidOperation

from aspen import Response
from babel.numbers import NumberFormatError
from gittip.exceptions import BadAmount, UserDoesntAcceptTips
from gittip.models.participant import Participant

[-----------------------------------------------------------------------------]

out = {}
if not user.ANON:

    # Get tipper and tippee.
    # ======================
    # XXX We could/should enforce that tips cannot be pledged at all to locked
    # accounts.

    tipper = user.participant
    tippee = Participant.from_username(path['username'])


    # Get and maybe set amount.
    # =========================

    first_time_tipper = None
    if tippee == tipper:
        amount = None
    elif POST and 'amount' in body:
        try:
            amount, first_time_tipper = tipper.set_tip_to( tippee
                                                         , parse_decimal(body['amount'])
                                                          )
        except (InvalidOperation, ValueError, BadAmount, NumberFormatError):
            raise Response(400, "bad amount")
        except UserDoesntAcceptTips:
            raise Response(400, "user doesn't accept tips")
    else:
        amount = tipper.get_tip_to(tippee.username)

    total_giving = tipper.giving
    total_receiving = tipper.receiving
    total_receiving_tippee = tippee.receiving

    out = { "amount": str(amount)
          , "total_giving": str(total_giving)
          , "total_giving_l": format_currency(total_giving, 'USD')
          , "total_receiving": str(total_receiving)
          , "total_receiving_l": format_currency(total_receiving, 'USD')
          , "total_receiving_tippee": str(total_receiving_tippee)
          , "total_receiving_tippee_l": format_currency(total_receiving_tippee, 'USD')
           }
    if first_time_tipper is not None:
        out["first_time"] = first_time_tipper


[---] application/json via json_dump
out
